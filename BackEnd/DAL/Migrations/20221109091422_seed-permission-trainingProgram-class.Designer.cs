// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(FRMDbContext))]
    [Migration("20221109091422_seed-permission-trainingProgram-class")]
    partial class seedpermissiontrainingProgramclass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.AssignmentSchema", b =>
                {
                    b.Property<long>("IDSyllabus")
                        .HasColumnType("bigint");

                    b.Property<double?>("PassingCriterial")
                        .HasColumnType("float");

                    b.Property<double?>("PercentAssigment")
                        .HasColumnType("float");

                    b.Property<double?>("PercentFinal")
                        .HasColumnType("float");

                    b.Property<double?>("PercentFinalPractice")
                        .HasColumnType("float");

                    b.Property<double?>("PercentQuiz")
                        .HasColumnType("float");

                    b.Property<double?>("PercentTheory")
                        .HasColumnType("float");

                    b.HasKey("IDSyllabus");

                    b.ToTable("assignmentSchemas");
                });

            modelBuilder.Entity("DAL.Entities.AttendeeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AttendeeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "FRF"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "FR"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "CPL"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "PFR"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "CPLU"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("AcceptedAttendee")
                        .HasColumnType("int");

                    b.Property<int?>("ActualAttendee")
                        .HasColumnType("int");

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("date");

                    b.Property<string>("ClassCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<int?>("CurrentSession")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentUnit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EndTimeLearing")
                        .HasColumnType("time");

                    b.Property<long?>("IdAttendeeType")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdFSU")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdFSUContact")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdFormatType")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdProgram")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdProgramContent")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdSite")
                        .HasColumnType("bigint");

                    b.Property<long>("IdStatus")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdTechnicalGroup")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdUniversity")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PlannedAtendee")
                        .HasColumnType("int");

                    b.Property<long?>("ReviewedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("StartTimeLearning")
                        .HasColumnType("time");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IdAttendeeType");

                    b.HasIndex("IdFSU");

                    b.HasIndex("IdFSUContact");

                    b.HasIndex("IdFormatType");

                    b.HasIndex("IdProgram");

                    b.HasIndex("IdProgramContent");

                    b.HasIndex("IdSite");

                    b.HasIndex("IdStatus");

                    b.HasIndex("IdTechnicalGroup");

                    b.HasIndex("IdUniversity");

                    b.HasIndex("ReviewedBy");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AcceptedAttendee = 18,
                            ActualAttendee = 18,
                            ApprovedBy = 1L,
                            ApprovedOn = new DateTime(2022, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassCode = "Class code",
                            ClassNumber = 1,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2022, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentSession = 1,
                            CurrentUnit = 1,
                            EndDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTimeLearing = new TimeSpan(0, 12, 0, 0, 0),
                            IdAttendeeType = 1L,
                            IdFSU = 1L,
                            IdFSUContact = 1L,
                            IdFormatType = 1L,
                            IdProgram = 1L,
                            IdProgramContent = 1L,
                            IdSite = 1L,
                            IdStatus = 1L,
                            IdTechnicalGroup = 1L,
                            IdUniversity = 1L,
                            Name = "Class name",
                            PlannedAtendee = 20,
                            ReviewedBy = 1L,
                            ReviewedOn = new DateTime(2022, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTimeLearning = new TimeSpan(0, 8, 0, 0, 0),
                            StartYear = 2022,
                            Status = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClassAdmin", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdClass")
                        .HasColumnType("bigint");

                    b.HasKey("IdUser", "IdClass");

                    b.HasIndex("IdClass");

                    b.ToTable("ClassAdmins");
                });

            modelBuilder.Entity("DAL.Entities.ClassFormatType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClassFormatTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Offline"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Online"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "OJT"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Virtual Training"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Blended"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClassLocation", b =>
                {
                    b.Property<long>("IdClass")
                        .HasColumnType("bigint");

                    b.Property<long>("IdLocation")
                        .HasColumnType("bigint");

                    b.HasKey("IdClass", "IdLocation");

                    b.HasIndex("IdLocation");

                    b.ToTable("ClassLocations");
                });

            modelBuilder.Entity("DAL.Entities.ClassMentor", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdClass")
                        .HasColumnType("bigint");

                    b.HasKey("IdUser", "IdClass");

                    b.HasIndex("IdClass");

                    b.ToTable("classMentors");
                });

            modelBuilder.Entity("DAL.Entities.ClassProgramCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClassProgramCodes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ProgramCode = "JAVA"
                        },
                        new
                        {
                            Id = 2L,
                            ProgramCode = "NET"
                        },
                        new
                        {
                            Id = 3L,
                            ProgramCode = "FE"
                        },
                        new
                        {
                            Id = 4L,
                            ProgramCode = "Android"
                        },
                        new
                        {
                            Id = 5L,
                            ProgramCode = "CPP"
                        },
                        new
                        {
                            Id = 6L,
                            ProgramCode = "Angular"
                        },
                        new
                        {
                            Id = 7L,
                            ProgramCode = "REACT"
                        },
                        new
                        {
                            Id = 8L,
                            ProgramCode = "PRN"
                        },
                        new
                        {
                            Id = 9L,
                            ProgramCode = "EMB"
                        },
                        new
                        {
                            Id = 10L,
                            ProgramCode = "OST"
                        },
                        new
                        {
                            Id = 11L,
                            ProgramCode = "SP"
                        },
                        new
                        {
                            Id = 12L,
                            ProgramCode = "TEST"
                        },
                        new
                        {
                            Id = 13L,
                            ProgramCode = "IOS"
                        },
                        new
                        {
                            Id = 14L,
                            ProgramCode = "COBOL"
                        },
                        new
                        {
                            Id = 15L,
                            ProgramCode = "AUT"
                        },
                        new
                        {
                            Id = 16L,
                            ProgramCode = "AI"
                        },
                        new
                        {
                            Id = 17L,
                            ProgramCode = "DE"
                        },
                        new
                        {
                            Id = 18L,
                            ProgramCode = "QA"
                        },
                        new
                        {
                            Id = 19L,
                            ProgramCode = "COMTOR"
                        },
                        new
                        {
                            Id = 20L,
                            ProgramCode = "DevOps"
                        },
                        new
                        {
                            Id = 21L,
                            ProgramCode = "SAP"
                        },
                        new
                        {
                            Id = 22L,
                            ProgramCode = "AC"
                        },
                        new
                        {
                            Id = 23L,
                            ProgramCode = "TC"
                        },
                        new
                        {
                            Id = 24L,
                            ProgramCode = "GOL"
                        },
                        new
                        {
                            Id = 25L,
                            ProgramCode = "Flutter"
                        },
                        new
                        {
                            Id = 26L,
                            ProgramCode = "ServiceNow"
                        },
                        new
                        {
                            Id = 27L,
                            ProgramCode = "PFR_JAVA"
                        },
                        new
                        {
                            Id = 28L,
                            ProgramCode = "FJW"
                        },
                        new
                        {
                            Id = 29L,
                            ProgramCode = "JWD"
                        },
                        new
                        {
                            Id = 30L,
                            ProgramCode = "JSE"
                        },
                        new
                        {
                            Id = 31L,
                            ProgramCode = "PAD"
                        },
                        new
                        {
                            Id = 32L,
                            ProgramCode = "FED"
                        },
                        new
                        {
                            Id = 33L,
                            ProgramCode = "FNW"
                        },
                        new
                        {
                            Id = 34L,
                            ProgramCode = "NWD"
                        },
                        new
                        {
                            Id = 35L,
                            ProgramCode = "NPD"
                        },
                        new
                        {
                            Id = 36L,
                            ProgramCode = "WAT"
                        },
                        new
                        {
                            Id = 37L,
                            ProgramCode = "PRD"
                        },
                        new
                        {
                            Id = 38L,
                            ProgramCode = "PML"
                        },
                        new
                        {
                            Id = 39L,
                            ProgramCode = "ITF"
                        },
                        new
                        {
                            Id = 40L,
                            ProgramCode = "FJB"
                        },
                        new
                        {
                            Id = 41L,
                            ProgramCode = "OCA"
                        },
                        new
                        {
                            Id = 42L,
                            ProgramCode = "BA"
                        },
                        new
                        {
                            Id = 43L,
                            ProgramCode = "APM"
                        },
                        new
                        {
                            Id = 44L,
                            ProgramCode = "DSA"
                        },
                        new
                        {
                            Id = 45L,
                            ProgramCode = "FIF"
                        },
                        new
                        {
                            Id = 46L,
                            ProgramCode = "DEE"
                        },
                        new
                        {
                            Id = 47L,
                            ProgramCode = "STE"
                        },
                        new
                        {
                            Id = 48L,
                            ProgramCode = "Flexcube"
                        },
                        new
                        {
                            Id = 49L,
                            ProgramCode = "OCP"
                        },
                        new
                        {
                            Id = 50L,
                            ProgramCode = "FUJS"
                        },
                        new
                        {
                            Id = 51L,
                            ProgramCode = "CES"
                        },
                        new
                        {
                            Id = 52L,
                            ProgramCode = "CLOUD"
                        },
                        new
                        {
                            Id = 53L,
                            ProgramCode = "PHP"
                        },
                        new
                        {
                            Id = 54L,
                            ProgramCode = "NodeJS"
                        },
                        new
                        {
                            Id = 55L,
                            ProgramCode = "ASE"
                        },
                        new
                        {
                            Id = 56L,
                            ProgramCode = "MPP"
                        },
                        new
                        {
                            Id = 57L,
                            ProgramCode = "DATA"
                        },
                        new
                        {
                            Id = 58L,
                            ProgramCode = "Sitecore"
                        },
                        new
                        {
                            Id = 59L,
                            ProgramCode = "MAT"
                        },
                        new
                        {
                            Id = 60L,
                            ProgramCode = "AND"
                        },
                        new
                        {
                            Id = 61L,
                            ProgramCode = "ADR"
                        },
                        new
                        {
                            Id = 62L,
                            ProgramCode = "JAVA"
                        },
                        new
                        {
                            Id = 63L,
                            ProgramCode = "Mobile"
                        },
                        new
                        {
                            Id = 64L,
                            ProgramCode = "GST_JAVA"
                        },
                        new
                        {
                            Id = 65L,
                            ProgramCode = "LITE_CPP"
                        },
                        new
                        {
                            Id = 66L,
                            ProgramCode = "WinApp"
                        },
                        new
                        {
                            Id = 67L,
                            ProgramCode = "Magento"
                        },
                        new
                        {
                            Id = 68L,
                            ProgramCode = "Python"
                        },
                        new
                        {
                            Id = 69L,
                            ProgramCode = "RN"
                        },
                        new
                        {
                            Id = 70L,
                            ProgramCode = "FUKS"
                        },
                        new
                        {
                            Id = 71L,
                            ProgramCode = "RPA"
                        },
                        new
                        {
                            Id = 72L,
                            ProgramCode = "Erlang"
                        },
                        new
                        {
                            Id = 73L,
                            ProgramCode = "Golang"
                        },
                        new
                        {
                            Id = 74L,
                            ProgramCode = "C++/Linux"
                        },
                        new
                        {
                            Id = 75L,
                            ProgramCode = "AEM"
                        },
                        new
                        {
                            Id = 76L,
                            ProgramCode = "GST_EMB"
                        },
                        new
                        {
                            Id = 77L,
                            ProgramCode = "GST_NET"
                        },
                        new
                        {
                            Id = 78L,
                            ProgramCode = "JP"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClassSelectedDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("date");

                    b.Property<long>("IdClass")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdClass");

                    b.ToTable("ClassSelectedDates");
                });

            modelBuilder.Entity("DAL.Entities.ClassSite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClassSites");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Site = "HN"
                        },
                        new
                        {
                            Id = 2L,
                            Site = "HCM"
                        },
                        new
                        {
                            Id = 3L,
                            Site = "DN"
                        },
                        new
                        {
                            Id = 4L,
                            Site = "CT"
                        },
                        new
                        {
                            Id = 5L,
                            Site = "QN"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClassStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClassStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Reviewing"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Approving"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Start"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Delayed"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Opened"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClassTechnicalGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ClassTechnicalGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 2L,
                            Name = ".NET"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "FE"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "CPP"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "React"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Embedded"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Out System"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Sharepoint"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Cobol"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "AUT"
                        },
                        new
                        {
                            Id = 14L,
                            Name = "AI"
                        },
                        new
                        {
                            Id = 15L,
                            Name = "Data"
                        },
                        new
                        {
                            Id = 16L,
                            Name = "QA"
                        },
                        new
                        {
                            Id = 17L,
                            Name = "Comtor"
                        },
                        new
                        {
                            Id = 18L,
                            Name = "DevOps"
                        },
                        new
                        {
                            Id = 19L,
                            Name = "SAP"
                        },
                        new
                        {
                            Id = 20L,
                            Name = "ABAP"
                        },
                        new
                        {
                            Id = 21L,
                            Name = "Go Lang"
                        },
                        new
                        {
                            Id = 22L,
                            Name = "Flutter"
                        },
                        new
                        {
                            Id = 23L,
                            Name = "ServiceNow"
                        },
                        new
                        {
                            Id = 24L,
                            Name = "Front-End"
                        },
                        new
                        {
                            Id = 25L,
                            Name = "Manual Test"
                        },
                        new
                        {
                            Id = 26L,
                            Name = "Automation Test"
                        },
                        new
                        {
                            Id = 27L,
                            Name = "C++"
                        },
                        new
                        {
                            Id = 28L,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 29L,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 30L,
                            Name = "OCA8"
                        },
                        new
                        {
                            Id = 31L,
                            Name = "BA"
                        },
                        new
                        {
                            Id = 32L,
                            Name = "APM"
                        },
                        new
                        {
                            Id = 33L,
                            Name = "DSA"
                        },
                        new
                        {
                            Id = 34L,
                            Name = "FIF"
                        },
                        new
                        {
                            Id = 35L,
                            Name = "STE"
                        },
                        new
                        {
                            Id = 36L,
                            Name = "Flexcube"
                        },
                        new
                        {
                            Id = 37L,
                            Name = "CLOUD"
                        },
                        new
                        {
                            Id = 38L,
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 39L,
                            Name = "NodeJS"
                        },
                        new
                        {
                            Id = 40L,
                            Name = "Security Engineer"
                        },
                        new
                        {
                            Id = 41L,
                            Name = "Microsoft Power Platform"
                        },
                        new
                        {
                            Id = 42L,
                            Name = "Data Engineer"
                        },
                        new
                        {
                            Id = 43L,
                            Name = "Sitecore"
                        },
                        new
                        {
                            Id = 44L,
                            Name = "Agile"
                        },
                        new
                        {
                            Id = 45L,
                            Name = "React Native"
                        },
                        new
                        {
                            Id = 46L,
                            Name = "Certificate"
                        },
                        new
                        {
                            Id = 47L,
                            Name = "SAP,ABAP"
                        },
                        new
                        {
                            Id = 48L,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 49L,
                            Name = "WinApp"
                        },
                        new
                        {
                            Id = 50L,
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 51L,
                            Name = "RPA"
                        },
                        new
                        {
                            Id = 52L,
                            Name = "Erlang"
                        },
                        new
                        {
                            Id = 53L,
                            Name = "Fullstack Java"
                        },
                        new
                        {
                            Id = 54L,
                            Name = "Fullstack .NET"
                        },
                        new
                        {
                            Id = 55L,
                            Name = "Java Standard"
                        },
                        new
                        {
                            Id = 56L,
                            Name = ".NET standard"
                        },
                        new
                        {
                            Id = 57L,
                            Name = "Golang"
                        },
                        new
                        {
                            Id = 58L,
                            Name = "C++/Linux"
                        },
                        new
                        {
                            Id = 59L,
                            Name = "AEM"
                        },
                        new
                        {
                            Id = 60L,
                            Name = "JP"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClassTrainee", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdClass")
                        .HasColumnType("bigint");

                    b.HasKey("IdUser", "IdClass");

                    b.HasIndex("IdClass");

                    b.ToTable("ClassTrainees");
                });

            modelBuilder.Entity("DAL.Entities.ClassUniversityCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("UniversityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClassUniversityCodes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UniversityCode = "ALL"
                        });
                });

            modelBuilder.Entity("DAL.Entities.ClassUpdateHistory", b =>
                {
                    b.Property<long>("IdClass")
                        .HasColumnType("bigint");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdClass", "ModifyBy", "UpdateDate");

                    b.HasIndex("ModifyBy");

                    b.ToTable("ClassUpdateHistories");
                });

            modelBuilder.Entity("DAL.Entities.Curriculum", b =>
                {
                    b.Property<long>("IdProgram")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSyllabus")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOrder")
                        .HasColumnType("int");

                    b.HasKey("IdProgram", "IdSyllabus");

                    b.HasIndex("IdSyllabus");

                    b.ToTable("Curricula");
                });

            modelBuilder.Entity("DAL.Entities.DeliveryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Assignment/Lab"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Concept/Lecture"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Guide/Review"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Test/Quiz"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Exam"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Seminar/Workshop"
                        });
                });

            modelBuilder.Entity("DAL.Entities.FormatType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FormatTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Offline"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Online"
                        });
                });

            modelBuilder.Entity("DAL.Entities.FsoftUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FsoftUnits");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "FHM",
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            Name = "FU",
                            Status = 1
                        },
                        new
                        {
                            Id = 3L,
                            Name = "FPTN",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.FSUContactPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("IdFSU")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdFSU");

                    b.ToTable("FSUContactPoints");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Contact = "BaCH@fsoft.com.vn",
                            IdFSU = 1L,
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            Contact = "0912345678",
                            IdFSU = 2L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.HistoryMaterial", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdMaterial")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdUser", "IdMaterial", "ModifiedOn");

                    b.HasIndex("IdMaterial");

                    b.ToTable("HistoryMaterials");
                });

            modelBuilder.Entity("DAL.Entities.HistorySyllabus", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSyllabus")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdUser", "IdSyllabus", "ModifiedOn");

                    b.HasIndex("IdSyllabus");

                    b.ToTable("HistorySyllabi");
                });

            modelBuilder.Entity("DAL.Entities.HistoryTrainingProgram", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProgram")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("date");

                    b.HasKey("IdUser", "IdProgram");

                    b.HasIndex("IdProgram");

                    b.ToTable("HistoryTrainingPrograms");
                });

            modelBuilder.Entity("DAL.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<long>("IdDeliveryType")
                        .HasColumnType("bigint");

                    b.Property<long>("IdFormatType")
                        .HasColumnType("bigint");

                    b.Property<long>("IdOutputStandard")
                        .HasColumnType("bigint");

                    b.Property<long>("IdUnit")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDeliveryType");

                    b.HasIndex("IdFormatType");

                    b.HasIndex("IdOutputStandard");

                    b.HasIndex("IdUnit");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("DAL.Entities.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "All level"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Fresher"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Intern"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "FTown 1",
                            Status = 0
                        },
                        new
                        {
                            Id = 2L,
                            Name = "FTown 2",
                            Status = 0
                        },
                        new
                        {
                            Id = 3L,
                            Name = "FTown 3",
                            Status = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("HyperLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<long>("IdLesson")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLesson");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("DAL.Entities.OutputStandard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OutputStandards");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "H4SD"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "K6SD"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "H6SD"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "H1ST"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "H2SD"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "K4SD"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "K3SD "
                        });
                });

            modelBuilder.Entity("DAL.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Access denied"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "View"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Modify"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Full access"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Delete while viewing"
                        });
                });

            modelBuilder.Entity("DAL.Entities.PermissionRight", b =>
                {
                    b.Property<long>("IdRight")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRole")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPermission")
                        .HasColumnType("bigint");

                    b.HasKey("IdRight", "IdRole");

                    b.HasIndex("IdPermission");

                    b.HasIndex("IdRole");

                    b.ToTable("PermissionRights");

                    b.HasData(
                        new
                        {
                            IdRight = 1L,
                            IdRole = 1L,
                            IdPermission = 5L
                        },
                        new
                        {
                            IdRight = 2L,
                            IdRole = 1L,
                            IdPermission = 5L
                        },
                        new
                        {
                            IdRight = 3L,
                            IdRole = 1L,
                            IdPermission = 5L
                        },
                        new
                        {
                            IdRight = 4L,
                            IdRole = 1L,
                            IdPermission = 5L
                        },
                        new
                        {
                            IdRight = 5L,
                            IdRole = 1L,
                            IdPermission = 5L
                        },
                        new
                        {
                            IdRight = 6L,
                            IdRole = 1L,
                            IdPermission = 5L
                        });
                });

            modelBuilder.Entity("DAL.Entities.Right", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Rights");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Syllabus"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Training program"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Class"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Learning material"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "User"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Training calendar"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Class Admin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Trainer"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("DAL.Entities.RoleRight", b =>
                {
                    b.Property<long>("IDRight")
                        .HasColumnType("bigint");

                    b.Property<long>("IDRole")
                        .HasColumnType("bigint");

                    b.HasKey("IDRight", "IDRole");

                    b.HasIndex("IDRole");

                    b.ToTable("RoleRights");
                });

            modelBuilder.Entity("DAL.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("IdSyllabus")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSyllabus");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DAL.Entities.Syllabus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AttendeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CourseObjectives")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Description")
                        .HasColumnType("NText");

                    b.Property<string>("HyperLink")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<long>("IdLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Technicalrequirement")
                        .HasColumnType("NText");

                    b.Property<string>("TrainingPrinciple")
                        .HasColumnType("NText");

                    b.Property<double>("Version")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdLevel");

                    b.ToTable("Syllabi");
                });

            modelBuilder.Entity("DAL.Entities.SyllabusTrainer", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSyllabus")
                        .HasColumnType("bigint");

                    b.HasKey("IdUser", "IdSyllabus");

                    b.HasIndex("IdSyllabus");

                    b.ToTable("SyllabusTrainers");
                });

            modelBuilder.Entity("DAL.Entities.TrainingProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainingPrograms");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "C# Foundation",
                            Status = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("IdSession")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSession");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<long>("IdRole")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("ResetPasswordOtp")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Address = "123 đường 456",
                            DateOfBirth = new DateTime(2000, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "superadmin@fsoft.com",
                            FullName = "Super Admin",
                            Gender = "M",
                            IdRole = 1L,
                            Password = "$2a$11$k7zKp9cQOIE3/c22YdD29O52l8x.9bbji4kJOPJ3Jy.f4kIUYIQ0G",
                            Phone = "0123456789",
                            Status = 1,
                            UserName = "superadmin@fsoft.com"
                        },
                        new
                        {
                            ID = 2L,
                            Address = "123 đường 456",
                            DateOfBirth = new DateTime(2000, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "classadmin@fsoft.com",
                            FullName = "Class Admin",
                            Gender = "F",
                            IdRole = 2L,
                            Password = "$2a$11$IWL97xH2L60fhHMoo38msOYC7ZsP6GsrpnO.CLS04IRNBkqs8TdWS",
                            Phone = "0123456789",
                            Status = 1,
                            UserName = "classadmin@fsoft.com"
                        },
                        new
                        {
                            ID = 3L,
                            Address = "123 đường 456",
                            DateOfBirth = new DateTime(2000, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer@fsoft.com",
                            FullName = "Trainer",
                            Gender = "M",
                            IdRole = 3L,
                            Password = "$2a$11$4/mkPNwz0l/.e7zXfRT69eKsP327tqz10Ldf5s0iWAZLNCWRRRrxK",
                            Phone = "0123456789",
                            Status = 1,
                            UserName = "trainer@fsoft.com"
                        },
                        new
                        {
                            ID = 4L,
                            Address = "123 đường 456",
                            DateOfBirth = new DateTime(2000, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@fsoft.com",
                            FullName = "Student",
                            Gender = "M",
                            IdRole = 4L,
                            Password = "$2a$11$WTeAE4MdAkR4ZtVooCdZkuuzam5sdxDTpm1VJqL/RFIEJNLJk.PX2",
                            Phone = "0123456789",
                            Status = 1,
                            UserName = "student@fsoft.com"
                        });
                });

            modelBuilder.Entity("DAL.Entities.AssignmentSchema", b =>
                {
                    b.HasOne("DAL.Entities.Syllabus", "Syllabus")
                        .WithOne("AssignmentSchema")
                        .HasForeignKey("DAL.Entities.AssignmentSchema", "IDSyllabus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("DAL.Entities.Class", b =>
                {
                    b.HasOne("DAL.Entities.User", "ApprovedUser")
                        .WithMany("ApprovedClasses")
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("DAL.Entities.User", "CreatedUser")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.AttendeeType", "AttendeeType")
                        .WithMany("Classes")
                        .HasForeignKey("IdAttendeeType");

                    b.HasOne("DAL.Entities.FsoftUnit", "FsoftUnit")
                        .WithMany("Classes")
                        .HasForeignKey("IdFSU");

                    b.HasOne("DAL.Entities.FSUContactPoint", "FSUContactPoint")
                        .WithMany("Classes")
                        .HasForeignKey("IdFSUContact");

                    b.HasOne("DAL.Entities.ClassFormatType", "ClassFormatType")
                        .WithMany("Classes")
                        .HasForeignKey("IdFormatType");

                    b.HasOne("DAL.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("Classes")
                        .HasForeignKey("IdProgram");

                    b.HasOne("DAL.Entities.ClassProgramCode", "ClassProgramCode")
                        .WithMany("Classes")
                        .HasForeignKey("IdProgramContent");

                    b.HasOne("DAL.Entities.ClassSite", "ClassSite")
                        .WithMany("Classes")
                        .HasForeignKey("IdSite");

                    b.HasOne("DAL.Entities.ClassStatus", "ClassStatus")
                        .WithMany("Classes")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ClassTechnicalGroup", "classTechnicalGroup")
                        .WithMany("Classes")
                        .HasForeignKey("IdTechnicalGroup");

                    b.HasOne("DAL.Entities.ClassUniversityCode", "ClassUniversityCode")
                        .WithMany("Classes")
                        .HasForeignKey("IdUniversity");

                    b.HasOne("DAL.Entities.User", "ReviewedUser")
                        .WithMany("ReviewedClasses")
                        .HasForeignKey("ReviewedBy");

                    b.Navigation("ApprovedUser");

                    b.Navigation("AttendeeType");

                    b.Navigation("ClassFormatType");

                    b.Navigation("ClassProgramCode");

                    b.Navigation("ClassSite");

                    b.Navigation("ClassStatus");

                    b.Navigation("ClassUniversityCode");

                    b.Navigation("CreatedUser");

                    b.Navigation("FSUContactPoint");

                    b.Navigation("FsoftUnit");

                    b.Navigation("ReviewedUser");

                    b.Navigation("TrainingProgram");

                    b.Navigation("classTechnicalGroup");
                });

            modelBuilder.Entity("DAL.Entities.ClassAdmin", b =>
                {
                    b.HasOne("DAL.Entities.Class", "Class")
                        .WithMany("ClassAdmins")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ClassAdmins")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ClassLocation", b =>
                {
                    b.HasOne("DAL.Entities.Class", "Class")
                        .WithMany("Locations")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Location", "Location")
                        .WithMany("Locations")
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DAL.Entities.ClassMentor", b =>
                {
                    b.HasOne("DAL.Entities.Class", "Class")
                        .WithMany("ClassMentors")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ClassMentors")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ClassSelectedDate", b =>
                {
                    b.HasOne("DAL.Entities.Class", "Class")
                        .WithMany("ClassSelectedDates")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DAL.Entities.ClassTrainee", b =>
                {
                    b.HasOne("DAL.Entities.Class", "Class")
                        .WithMany("ClassTrainees")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ClassTrainees")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ClassUpdateHistory", b =>
                {
                    b.HasOne("DAL.Entities.Class", "Class")
                        .WithMany("ClassUpdateHistories")
                        .HasForeignKey("IdClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("ClassUpdateHistories")
                        .HasForeignKey("ModifyBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Curriculum", b =>
                {
                    b.HasOne("DAL.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("Curricula")
                        .HasForeignKey("IdProgram")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Syllabus", "Syllabus")
                        .WithMany("Curricula")
                        .HasForeignKey("IdSyllabus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("DAL.Entities.FSUContactPoint", b =>
                {
                    b.HasOne("DAL.Entities.FsoftUnit", "FSU")
                        .WithMany("FSUContactPoints")
                        .HasForeignKey("IdFSU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FSU");
                });

            modelBuilder.Entity("DAL.Entities.HistoryMaterial", b =>
                {
                    b.HasOne("DAL.Entities.Material", "Material")
                        .WithMany("HistoryMaterials")
                        .HasForeignKey("IdMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("HistoryMaterials")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.HistorySyllabus", b =>
                {
                    b.HasOne("DAL.Entities.Syllabus", "Syllabus")
                        .WithMany("HistorySyllabi")
                        .HasForeignKey("IdSyllabus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("HistorySyllabi")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.HistoryTrainingProgram", b =>
                {
                    b.HasOne("DAL.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("HistoryTrainingPrograms")
                        .HasForeignKey("IdProgram")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("HistoryTrainingPrograms")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Lesson", b =>
                {
                    b.HasOne("DAL.Entities.DeliveryType", "DeliveryType")
                        .WithMany("Lessons")
                        .HasForeignKey("IdDeliveryType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.FormatType", "FormatType")
                        .WithMany("Lessons")
                        .HasForeignKey("IdFormatType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.OutputStandard", "OutputStandard")
                        .WithMany("Lessons")
                        .HasForeignKey("IdOutputStandard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Unit", "Unit")
                        .WithMany("Lessons")
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryType");

                    b.Navigation("FormatType");

                    b.Navigation("OutputStandard");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DAL.Entities.Material", b =>
                {
                    b.HasOne("DAL.Entities.Lesson", "Lesson")
                        .WithMany("Materials")
                        .HasForeignKey("IdLesson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("DAL.Entities.PermissionRight", b =>
                {
                    b.HasOne("DAL.Entities.Permission", "Permission")
                        .WithMany("PermissionRights")
                        .HasForeignKey("IdPermission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Right", "Right")
                        .WithMany("PermissionRights")
                        .HasForeignKey("IdRight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("PermissionRights")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.RoleRight", b =>
                {
                    b.HasOne("DAL.Entities.Right", "Right")
                        .WithMany("RoleRights")
                        .HasForeignKey("IDRight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("RoleRights")
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.Session", b =>
                {
                    b.HasOne("DAL.Entities.Syllabus", "Syllabus")
                        .WithMany("Sessions")
                        .HasForeignKey("IdSyllabus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("DAL.Entities.Syllabus", b =>
                {
                    b.HasOne("DAL.Entities.Level", "Level")
                        .WithMany("Syllabi")
                        .HasForeignKey("IdLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("DAL.Entities.SyllabusTrainer", b =>
                {
                    b.HasOne("DAL.Entities.Syllabus", "Syllabus")
                        .WithMany("SyllabusTrainers")
                        .HasForeignKey("IdSyllabus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("SyllabusTrainers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Unit", b =>
                {
                    b.HasOne("DAL.Entities.Session", "Session")
                        .WithMany("Units")
                        .HasForeignKey("IdSession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.AttendeeType", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.Class", b =>
                {
                    b.Navigation("ClassAdmins");

                    b.Navigation("ClassMentors");

                    b.Navigation("ClassSelectedDates");

                    b.Navigation("ClassTrainees");

                    b.Navigation("ClassUpdateHistories");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DAL.Entities.ClassFormatType", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.ClassProgramCode", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.ClassSite", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.ClassStatus", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.ClassTechnicalGroup", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.ClassUniversityCode", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.DeliveryType", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DAL.Entities.FormatType", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DAL.Entities.FsoftUnit", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("FSUContactPoints");
                });

            modelBuilder.Entity("DAL.Entities.FSUContactPoint", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("DAL.Entities.Lesson", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DAL.Entities.Level", b =>
                {
                    b.Navigation("Syllabi");
                });

            modelBuilder.Entity("DAL.Entities.Location", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DAL.Entities.Material", b =>
                {
                    b.Navigation("HistoryMaterials");
                });

            modelBuilder.Entity("DAL.Entities.OutputStandard", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DAL.Entities.Permission", b =>
                {
                    b.Navigation("PermissionRights");
                });

            modelBuilder.Entity("DAL.Entities.Right", b =>
                {
                    b.Navigation("PermissionRights");

                    b.Navigation("RoleRights");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("PermissionRights");

                    b.Navigation("RoleRights");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Session", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("DAL.Entities.Syllabus", b =>
                {
                    b.Navigation("AssignmentSchema")
                        .IsRequired();

                    b.Navigation("Curricula");

                    b.Navigation("HistorySyllabi");

                    b.Navigation("Sessions");

                    b.Navigation("SyllabusTrainers");
                });

            modelBuilder.Entity("DAL.Entities.TrainingProgram", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Curricula");

                    b.Navigation("HistoryTrainingPrograms");
                });

            modelBuilder.Entity("DAL.Entities.Unit", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("ApprovedClasses");

                    b.Navigation("ClassAdmins");

                    b.Navigation("ClassMentors");

                    b.Navigation("ClassTrainees");

                    b.Navigation("ClassUpdateHistories");

                    b.Navigation("CreatedClasses");

                    b.Navigation("HistoryMaterials");

                    b.Navigation("HistorySyllabi");

                    b.Navigation("HistoryTrainingPrograms");

                    b.Navigation("ReviewedClasses");

                    b.Navigation("SyllabusTrainers");
                });
#pragma warning restore 612, 618
        }
    }
}
